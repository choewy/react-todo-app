{"version":3,"sources":["styled.js","components/Login.js","sheets.js","components/Signup.js","components/Navbar.js","redux/store.js","components/Template.js","App.js","index.js"],"names":["ErrorMessage","styled","div","GlobalStyle","Container","NavbarWrapper","NavbarMenus","ol","NavbarMenu","Link","LoginWrapper","LoginForm","form","LoginInput","input","LoginButton","button","SignupWrapper","SignupInput","label","SignupButton","Login","path","exact","api","doc","GoogleSpreadsheet","API_KEY","GOOGLE_SHEET_ID","init","a","useServiceAccountAuth","GOOGLE_CONFIG","loadInfo","findGoogleSheetUser","email","Promise","resolve","reject","auth","sheetsByTitle","getRows","then","values","forEach","element","_sheet","headerValues","key","catch","error","console","log","Signup","useState","name","setName","setEmail","firstPassword","setFirstPassword","lastPassword","setLastPassword","setError","handleSignup","includes","type","value","onChange","event","target","onClick","Navbar","paths","to","home","login","signup","actions","todo","persistConfig","storage","whitelist","reducer","persistReducer","state","action","LOGIN","user","uuid","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","getState","Template","meta","Helmet","title","rel","href","content","description","httpEquiv","property","image","url","lang","connect","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e425b74c.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n`\r\n\r\nexport const GlobalStyle = styled.div`\r\n    * {\r\n        padding: 0;\r\n        margin: 0;\r\n        box-sizing: border-box;\r\n        font-family: 'Nanum Myeongjo', serif;\r\n    }\r\n\r\n    html,\r\n    body {\r\n        height: 100%;\r\n    }\r\n\r\n    a,\r\n    a:hover {\r\n        text-decoration: none;\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial,\r\n    sans-serif, Apple Color Emoji, Segoe UI Emoji;\r\n`;\r\n\r\n// Navbar\r\n\r\nexport const NavbarWrapper = styled.div`\r\n`;\r\n\r\nexport const NavbarMenus = styled.ol`\r\n`;\r\n\r\nexport const NavbarMenu = styled(Link)`\r\n    text-decoration: none;\r\n    margin-right: 10px;\r\n`;\r\n\r\n// Login Tags\r\n\r\nexport const LoginWrapper = styled.div`\r\n`;\r\n\r\nexport const LoginForm = styled.form`\r\n`;\r\n\r\nexport const LoginInput = styled.input`\r\n`;\r\n\r\nexport const LoginButton = styled.button`\r\n`;\r\n\r\n// Signup Tags\r\n\r\nexport const SignupWrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nwidth: 500px;\r\njustify-content: center;\r\nalign-items: center;\r\nmargin: 0 auto;\r\n\r\n* {\r\n    width: 100%;\r\n    height: 30px;\r\n    margin: 5px;\r\n}\r\n\r\n`;\r\n\r\nexport const SignupLabel = styled.label`\r\n`;\r\n\r\nexport const SignupForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 500px;\r\n    \r\n    * {\r\n        width: 100%;\r\n        height: 30px;\r\n        margin: 5px;\r\n    }\r\n`;\r\n\r\nexport const SignupInput = styled.input`\r\n`;\r\n\r\nexport const SignupButton = styled.button`\r\n    width: 101.5%;\r\n    height: 35px;\r\n`;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { LoginButton, LoginForm, LoginInput, LoginWrapper } from '../styled';\r\n\r\nconst Login = ({ path }) => {\r\n    return (\r\n        <Route exact path={path}>\r\n            <LoginWrapper>\r\n                <LoginForm>\r\n                    <LoginInput />\r\n                    <LoginInput />\r\n                    <LoginButton>로그인</LoginButton>\r\n                </LoginForm>\r\n            </LoginWrapper>\r\n        </Route>\r\n    )\r\n};\r\n\r\nexport default Login;","import { GoogleSpreadsheet } from \"google-spreadsheet\";\r\nimport { pbkdf2, randomBytes } from \"crypto\";\r\nimport { v4 } from 'uuid';\r\nimport API_KEY from './google.sheets.key.json';\r\n\r\n// 오늘 날짜 포맷 (YYYY-MM-DD)\r\nconst getToday = () => {\r\n    const today = new Date();\r\n    return `${today.getFullYear()}-${('0' + (today.getMonth() + 1)).slice(-2)}-${('0' + today.getDate()).slice(-2)}`\r\n}\r\n\r\n// 비밀번호 salt 생성\r\nconst createPasswordSalt = () =>\r\n    new Promise((resolve, reject) => {\r\n        randomBytes(64, (error, buffer) => {\r\n            if (error) reject(error);\r\n            resolve(buffer.toString('base64'));\r\n        })\r\n    })\r\n\r\n// 비밀번호 암호화\r\nconst encodingPassword = (salt, password) =>\r\n    new Promise((resolve, reject) => {\r\n        pbkdf2(password, salt, 100000, 64, 'sha512', (error, key) => {\r\n            if (error) reject(error);\r\n            resolve({ password: key.toString('base64'), salt });\r\n        })\r\n    });\r\n\r\n// Google Sheet API 객체\r\nconst api = {\r\n    doc: new GoogleSpreadsheet(API_KEY.GOOGLE_SHEET_ID),\r\n    init: async () => {\r\n        await api.doc.useServiceAccountAuth(API_KEY.GOOGLE_CONFIG);\r\n        await api.doc.loadInfo();\r\n    }\r\n}\r\n\r\n// 이메일에 맞는 계정 조회\r\nexport const findGoogleSheetUser = (email) =>\r\n    new Promise(async (resolve, reject) => {\r\n        const auth = {}\r\n        if (email) {\r\n            await api.init();\r\n            await api.doc.sheetsByTitle['user'].getRows()\r\n                .then((values) => {\r\n                    values.forEach((element) => {\r\n                        if (email === element.email) {\r\n                            for (const key of element._sheet.headerValues) {\r\n                                auth[key] = element[key];\r\n                            }\r\n                            return;\r\n                        }\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                })\r\n        }\r\n        resolve(auth);\r\n    });\r\n\r\n\r\n// 회원가입\r\nexport const appendGoogleSheetUser = (name, email, password) =>\r\n    new Promise(async (resolve, reject) => {\r\n        const uuid = `u${v4()}`;\r\n        const salt = await createPasswordSalt();\r\n        const encodePassword = await encodingPassword(salt, password);\r\n        const encodeAuthor = await encodingPassword(salt, 'user');\r\n\r\n        await api.init();\r\n        await api.doc.sheetsByTitle['user'].addRow({\r\n            uuid: uuid,\r\n            name: name,\r\n            email: email,\r\n            salt: salt,\r\n            password: encodePassword,\r\n            author: encodeAuthor,\r\n            registDate: getToday()\r\n        })\r\n            .then((auth) => {\r\n                resolve(auth);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                reject(error);\r\n            })\r\n    });","import React, { useState } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { findGoogleSheetUser } from '../sheets';\r\nimport { ErrorMessage, SignupButton, SignupInput, SignupWrapper } from '../styled';\r\n\r\n\r\nconst Signup = ({ path }) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [firstPassword, setFirstPassword] = useState('');\r\n    const [lastPassword, setLastPassword] = useState('');\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleSignup = async () => {\r\n        findGoogleSheetUser(email)\r\n            .then((auth) => {\r\n                console.log(auth);\r\n                if (name === '') {\r\n                    setError(<ErrorMessage>이름을 입력하세요.</ErrorMessage>);\r\n                } else if (email === '') {\r\n                    setError(<ErrorMessage>이메일을 입력하세요.</ErrorMessage>);\r\n                } else if (email.includes('@') === false) {\r\n                    setError(<ErrorMessage>이메일 형식이 아닙니다.</ErrorMessage>)\r\n                } else if (auth !== {}) {\r\n                    setError(<ErrorMessage>이미 존재하는 메일 계정입니다.</ErrorMessage>)\r\n                } else if (firstPassword === '' || lastPassword === '') {\r\n                    setError(<ErrorMessage>비밀번호를 입력하세요.</ErrorMessage>)\r\n                } else if (firstPassword !== lastPassword) {\r\n                    setError(<ErrorMessage>비밀번호가 같지 않습니다.</ErrorMessage>)\r\n                } else {\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setError(<ErrorMessage>예기치 못한 오류가 발생하였습니다.</ErrorMessage>)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Route exact path={path}>\r\n            <SignupWrapper>\r\n                <SignupInput type=\"text\" value={name} onChange={(event) => setName(event.target.value)} />\r\n                <SignupInput type=\"text\" value={email} onChange={(event) => setEmail(event.target.value)} />\r\n                <SignupInput type=\"password\" value={firstPassword} onChange={(event) => setFirstPassword(event.target.value)} />\r\n                <SignupInput type=\"password\" value={lastPassword} onChange={(event) => setLastPassword(event.target.value)} />\r\n                {error}\r\n                <SignupButton type=\"button\" onClick={handleSignup}>회원가입</SignupButton>\r\n            </SignupWrapper>\r\n        </Route>\r\n    )\r\n};\r\n\r\nexport default Signup;","import React from 'react';\r\nimport { NavbarMenu, NavbarMenus, NavbarWrapper } from '../styled';\r\n\r\nconst Navbar = ({ paths }) => {\r\n    return (\r\n        <NavbarWrapper>\r\n            <NavbarMenus>\r\n                <NavbarMenu to={paths.home}>홈</NavbarMenu>\r\n                <NavbarMenu to={`${paths.login}`}>로그인</NavbarMenu>\r\n                <NavbarMenu to={paths.signup}>회원가입</NavbarMenu>\r\n            </NavbarMenus>\r\n        </NavbarWrapper>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import { createStore } from \"redux\";\r\nimport persistReducer from \"redux-persist/es/persistReducer\";\r\nimport persistStore from \"redux-persist/es/persistStore\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst actions = {\r\n    login: \"LOGIN\",\r\n    signup: \"SIGNUP\"\r\n};\r\n\r\nconst init = {\r\n    auth: {},\r\n    todo: {}\r\n};\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage,\r\n    whitelist: [\"auth\"]\r\n};\r\n\r\nconst reducer = persistReducer(persistConfig, (state = init, action) => {\r\n    switch (action.type) {\r\n        case actions.LOGIN:\r\n            return {\r\n                ...state,\r\n                user: action.uuid\r\n            }\r\n\r\n        case actions.signup:\r\n            return {\r\n                ...state,\r\n                user: action.uuid\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n});\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Container, GlobalStyle } from \"../styled\";\r\nimport Login from \"./Login\";\r\nimport Signup from \"./Signup\";\r\nimport Navbar from './Navbar';\r\nimport { store } from '../redux/store';\r\n\r\nconst state = store.getState();\r\nconsole.log(state);\r\nconst Template = ({ meta, paths }) => {\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{meta.title}</title>\r\n                <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\r\n\r\n                <meta name=\"description\" content={meta.description} />\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n                <meta httpEquiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n\r\n                <meta property=\"og:type\" content=\"website\" />\r\n                <meta property=\"og:title\" content={meta.title} />\r\n                <meta property=\"og:description\" content={meta.description} />\r\n                <meta property=\"og:image\" content={meta.image} />\r\n                <meta property=\"og:url\" content={meta.url} />\r\n                <meta property=\"og:site_name\" content={meta.title} />\r\n\r\n                <meta name=\"twitter:card\" content=\"summary\" />\r\n                <meta name=\"twitter:title\" content={meta.title} />\r\n                <meta name=\"twitter:description\" content={meta.description} />\r\n                <meta name=\"twitter:image\" content={meta.image} />\r\n                <meta name=\"twitter:site\" content=\"@최원영\" />\r\n                <meta name=\"twitter:creator\" content=\"@최원영\" />\r\n\r\n                <html lang=\"ko\" />\r\n            </Helmet>\r\n            <GlobalStyle />\r\n            <Router>\r\n                <Navbar paths={paths} />\r\n                <Switch>\r\n                    <Login path={paths.login} />\r\n                    <Signup path={paths.signup} />\r\n                </Switch>\r\n            </Router>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Template;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Template from './components/Template';\n\nconst meta = {\n  title: \"흔하디 흔한 TODO 앱\",\n  description: \"React와 Google Sheets로 개발하여 약간은 특별할지도 모르는 TODO 앱\",\n  image: \"\",\n  url: \"https://choewy.github.io/react-todo-app\"\n};\n\nconst paths = {\n  home: \"/\",\n  login: \"/login\",\n  signup: \"/signup\",\n};\n\nconst App = () => {\n  return (\n    <Template meta={meta} paths={paths} />\n  );\n}\n\nexport default connect((state) => {\n  return {\n    ...state\n  }\n})(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </BrowserRouter>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}